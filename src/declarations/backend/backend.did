type UserView = 
 record {
   coin: nat;
   id: UserId;
   last_action_timestamp: Time;
   owner_principal: principal;
   quests: vec QuestView;
   stamina: nat;
   username: text;
 };
type UserProfileView = 
 record {
   active_inventory: opt InventoryItemWithSkin;
   roles: vec CurrentRoleView;
   user: UserView;
 };
type UserId = nat;
type UserError = 
 variant {
   ActiveQuestExists;
   NoActiveRole;
   NotEnoughStamina;
   QuestNotFound;
   QuestNotInProgress;
   RoleNotFound;
   UserNotFound;
 };
type Time = int;
type SkinId = nat;
type Skin = 
 record {
   description: text;
   id: SkinId;
   image_url: text;
   name: text;
   price: nat;
 };
type ShopView = 
 record {
   available: vec Skin;
   owned: vec Skin;
 };
type ShopError = 
 variant {
   AlreadyOwned;
   NotAdmin;
   NotEnoughCoin;
   SkinNotFound;
   UserNotFound;
 };
type RoleSelection = 
 variant {
   Arts;
   Codes;
   Literature;
   Sports;
   Traveler;
 };
type RoleId = nat;
type Result_5 = 
 variant {
   err: ShopError;
   ok: SkinId;
 };
type Result_4 = 
 variant {
   err: ShopError;
   ok;
 };
type Result_3 = 
 variant {
   err: UserError;
   ok;
 };
type Result_2 = 
 variant {
   err: UserError;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: RegistrationError;
   ok: record {
         UserView;
         vec CurrentRoleView;
       };
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RegistrationError = 
 variant {
   AlreadyRegistered;
   UsernameTaken;
 };
type QuestView = 
 record {
   accepted_at: Time;
   coin_reward: nat;
   deadline: Time;
   description: text;
   exp_reward: nat;
   id: nat;
   stamina_cost: nat;
   status: QuestStatus;
   title: text;
   user_id: UserId;
 };
type QuestStatus = 
 variant {
   Completed;
   Failed;
   OnProgress;
 };
type LeaderboardResponse = 
 record {
   myLeaderboard: opt LeaderboardEntry;
   topLeaderboard: vec LeaderboardEntry;
 };
type LeaderboardEntry = 
 record {
   exp: nat;
   level: nat;
   rank: nat;
   skin: opt Skin;
   user_id: UserId;
   username: text;
 };
type InventoryItemWithSkin = 
 record {
   acquired_at: Time;
   id: InventoryId;
   is_active: bool;
   skin: Skin;
   user_id: UserId;
 };
type InventoryId = nat;
type CurrentRoleView = 
 record {
   exp: nat;
   id: CurrentRoleId;
   is_active: bool;
   level: nat;
   role_name: text;
 };
type CurrentRoleId = nat;
service : {
  acceptQuest: (title: text, description: text, stamina_cost: nat,
   coin_reward: nat, exp_reward: nat) -> (Result_3);
  addSkin: (name: text, description: text, image_url: text, price: nat) ->
   (Result_5);
  buySkin: (skin_id: SkinId) -> (Result_4);
  chooseRole: (role_to_select: RoleSelection) -> (Result_3);
  completeQuest: (questId: nat) -> (Result);
  detailQuest: (questId: nat) -> (opt QuestView) query;
  failExpiredQuests: () -> ();
  getCoins: () -> (Result_2) query;
  getInventory: () -> (vec InventoryItemWithSkin) query;
  getLeaderboardAllUserByRole: (role_id: RoleId) ->
   (LeaderboardResponse) query;
  getProfileUser: () -> (opt UserProfileView) query;
  getShop: () -> (ShopView) query;
  getStamina: () -> (Result_2);
  grantCoinByUsername: (username: text, amount: nat) -> (Result);
  historyQuest: () ->
   (record {
      completed: vec QuestView;
      failed: vec QuestView;
      onProgress: vec QuestView;
    }) query;
  isUserExists: () -> (bool) query;
  registerUser: (username: text) -> (Result_1);
  setActiveInventory: (inventory_id: InventoryId) -> (Result);
}
