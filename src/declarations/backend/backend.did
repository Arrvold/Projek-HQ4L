type UserView = 
 record {
   coin: nat;
   id: UserId;
   last_action_timestamp: Time;
   owner_principal: principal;
   quests: vec Quest;
   skins: vec InventoryItem;
   stamina: nat;
   username: text;
 };
type UserProfileView = 
 record {
   roles: vec CurrentRoleView;
   user: UserView;
 };
type UserId = nat;
type UserError = 
 variant {
   RoleNotFound;
   UserNotFound;
 };
type Time = int;
type SkinId = nat;
type Skin = 
 record {
   description: text;
   id: SkinId;
   image_url: text;
   is_limited: bool;
   name: text;
   price: nat;
   rarity: text;
 };
type ShopError = 
 variant {
   AlreadyOwned;
   NotAdmin;
   NotEnoughCoin;
   SkinNotFound;
   UserNotFound;
 };
type RoleSelection = 
 variant {
   Arts;
   Codes;
   Literature;
   Sports;
   Traveler;
 };
type Result_4 = 
 variant {
   err: ShopError;
   ok: SkinId;
 };
type Result_3 = 
 variant {
   err: ShopError;
   ok;
 };
type Result_2 = 
 variant {
   err: UserError;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: RegistrationError;
   ok: record {
         UserView;
         vec CurrentRoleView;
       };
 };
type RegistrationError = 
 variant {
   AlreadyRegistered;
   UsernameTaken;
 };
type QuestId = nat;
type Quest = 
 record {
   coin_reward: nat;
   exp_reward: nat;
   id: QuestId;
   is_active: bool;
   stamina_cost: nat;
   title: text;
 };
type InventoryItem = 
 record {
   acquired_at: Time;
   id: InventoryId;
   is_active: bool;
   skin_id: SkinId;
 };
type InventoryId = nat;
type CurrentRoleView = 
 record {
   exp: nat;
   id: CurrentRoleId;
   is_active: bool;
   level: nat;
   role_name: text;
 };
type CurrentRoleId = nat;
service : {
  addSkin: (name: text, description: text, rarity: text, image_url: text,
   is_limited: bool, price: nat) -> (Result_4);
  buySkin: (skin_id: SkinId) -> (Result_3);
  chooseRole: (role_to_toggle: RoleSelection) -> (Result_2);
  getInventory: () -> (vec InventoryItem) query;
  getProfileUser: () -> (opt UserProfileView) query;
  getShop: () -> (vec Skin) query;
  grantCoin: (target: principal, amount: nat) -> (Result_1);
  grantCoinByUsername: (username: text, amount: nat) -> (Result_1);
  isUserExists: () -> (bool) query;
  registerUser: (username: text) -> (Result);
}
